generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Appointment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String    @unique
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  date      DateTime?
  country   String
  status    Status    @default(PENDING)

  @@map("appointments")
}

enum Status {
  PENDING
  APPROVED
}

model Post {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  description String
  userId      String @db.ObjectId
  User        User   @relation(fields: [userId], references: [id])

  @@map("posts")
}

model Testimony {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  country   String
  testimony String
  published Boolean @default(false)

  @@map("testimonies")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String    @unique
  position String
  // role     Role      @default(CLIENT)
  Post     Post[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// model Schedule {
//   id   String   @id @default(auto()) @map("_id") @db.ObjectId
//   day  String
//   from DateTime
//   to   DateTime

//   @@map("schedules")
// }

// enum Role {
//   ADMIN  @map("admin")
//   CLIENT @map("client")

//   @@map("_Role")
// }
